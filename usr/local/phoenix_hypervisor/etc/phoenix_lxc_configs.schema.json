{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Phoenix Hypervisor LXC Configuration",
    "description": "Schema for validating Phoenix Hypervisor LXC container configurations.",
    "type": "object",
    "properties": {
        "$schema": {
            "type": "string",
            "description": "URI of the JSON Schema used to validate this document."
        },
        "nvidia_driver_version": {
            "type": "string",
            "description": "Expected NVIDIA driver version on the host."
        },
        "nvidia_repo_url": {
            "type": "string",
            "pattern": "^(https?|ftp):\\/\\/[^\\s\\/$.?#].[^\\s]*$",
            "description": "URL for the NVIDIA CUDA repository."
        },
        "nvidia_runfile_url": {
            "type": "string",
            "pattern": "^(https?|ftp):\\/\\/[^\\s\\/$.?#].[^\\s]*$",
            "description": "URL for the NVIDIA Driver runfile installer."
        },
        "lxc_configs": {
            "type": "object",
            "description": "A map of LXC container configurations, keyed by container ID.",
            "patternProperties": {
                "^[0-9]+$": {
                    "type": "object",
                    "properties": {
                        "start_at_boot": {
                            "type": "boolean",
                            "description": "Specifies whether the container should start at boot."
                        },
                        "boot_order": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "The boot order priority for the container."
                        },
                        "boot_delay": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "The delay in seconds before starting the next container in the boot order."
                        },
                        "name": {
                            "type": "string",
                            "minLength": 1,
                            "description": "The human-readable name for the LXC container"
                        },
                        "memory_mb": {
                            "type": "integer",
                            "minimum": 512,
                            "maximum": 131072,
                            "description": "The amount of RAM allocated to the container in megabytes. For AI workloads, values typically range from 2048-32768 MB depending on model size"
                        },
                        "swap_mb": {
                            "type": "integer",
                            "description": "The amount of swap allocated to the container in megabytes."
                        },
                        "cores": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 32,
                            "description": "The number of CPU cores allocated to the container. For AI workloads, typically 2-8 cores are recommended"
                        },
                        "template": {
                            "type": "string",
                            "minLength": 1,
                            "description": "The path to the LXC template tarball used to create the container"
                        },
                        "storage_pool": {
                            "type": "string",
                            "minLength": 1,
                            "description": "The name of the Proxmox storage pool to use for the container's root filesystem"
                        },
                        "storage_size_gb": {
                            "type": "integer",
                            "minimum": 10,
                            "maximum": 1024,
                            "description": "The size of the container's root filesystem in gigabytes. For AI workloads, typically 64-256 GB recommended"
                        },
                        "network_config": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 15,
                                    "description": "Name of the network interface inside the container"
                                },
                                "bridge": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Proxmox bridge the container connects to"
                                },
                                "ip": {
                                    "type": "string",
                                    "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])/([0-9]|[1-2][0-9]|3[0-2])$",
                                    "description": "Static IP address with CIDR notation for container"
                                },
                                "gw": {
                                    "type": "string",
                                    "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                                    "description": "Gateway IP address for the container's network"
                                }
                            },
                            "required": [
                                "name",
                                "bridge",
                                "ip",
                                "gw"
                            ],
                            "additionalProperties": false
                        },
                        "features": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "base_setup",
                                    "nvidia",
                                    "docker",
                                    "vllm"
                                ]
                            },
                            "description": "An array of feature scripts to apply to the container."
                        },
                        "mac_address": {
                            "type": "string",
                            "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
                            "description": "MAC address for the container interface"
                        },
                        "gpu_assignment": {
                            "type": "string",
                            "pattern": "^(none|[0-9]+(,[0-9]+)*)$",
                            "description": "GPU assignment for container. Use 'none' for no GPU access, or comma-separated indices (e.g., '0,1') for multiple GPUs"
                        },
                        "portainer_role": {
                            "type": "string",
                            "enum": [
                                "server",
                                "agent",
                                "none",
                                "infrastructure"
                            ],
                            "description": "Role of the container within the Portainer management system"
                        },
                        "unprivileged": {
                            "type": "boolean",
                            "description": "Whether the container runs in unprivileged mode"
                        },
                        "vllm_model": {
                            "type": [
                                "string",
                                "null"
                            ],
                            "description": "Path to the specific AI model this container is configured to serve using vLLM"
                        },
                        "vllm_served_model_name": {
                            "type": "string",
                            "description": "The name of the model served by vLLM."
                        },
                        "vllm_model_type": {
                            "type": "string",
                            "enum": [
                                "chat",
                                "embedding"
                            ],
                            "description": "Specifies the type of the vLLM model."
                        },
                        "vllm_port": {
                            "type": "integer",
                            "description": "The port vLLM is listening on."
                        },
                        "vllm_tensor_parallel_size": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 8,
                            "description": "Degree of tensor parallelism used by vLLM for the assigned model"
                        },
                        "vllm_gpu_memory_utilization": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1,
                            "description": "GPU memory utilization for vLLM."
                        },
                        "vllm_max_model_len": {
                            "type": "integer",
                            "description": "Maximum model length for vLLM."
                        },
                        "vllm_args": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Additional arguments for vLLM."
                        },
                        "template_snapshot_name": {
                            "type": "string",
                            "minLength": 1,
                            "description": "The name of the snapshot this template container should create."
                        },
                        "clone_from_ctid": {
                            "type": "string",
                            "pattern": "^[0-9]+$",
                            "description": "The Container ID of the template to clone from when creating this container."
                        },
                        "application_script": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Optional script to run after all features are applied to launch a persistent service."
                        },
                        "pct_options": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Additional options for the pct command."
                        },
                        "ports": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "pattern": "^[0-9]+:[0-9]+$"
                            },
                            "description": "An array of port mappings in the format 'host:container'."
                        },
                        "health_check": {
                            "type": "object",
                            "properties": {
                                "command": {
                                    "type": "string"
                                },
                                "retries": {
                                    "type": "integer"
                                },
                                "interval": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "command"
                            ]
                        },
                        "firewall": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean"
                                },
                                "rules": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "in",
                                                    "out"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "ACCEPT",
                                                    "DROP",
                                                    "REJECT"
                                                ]
                                            },
                                            "source": {
                                                "type": "string",
                                                "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
                                            },
                                            "dest": {
                                                "type": "string",
                                                "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
                                            },
                                            "proto": {
                                                "type": "string",
                                                "enum": [
                                                    "tcp",
                                                    "udp"
                                                ]
                                            },
                                            "port": {
                                                "type": "string",
                                                "pattern": "^[0-9]+$"
                                            }
                                        },
                                        "required": [
                                            "type",
                                            "action",
                                            "proto",
                                            "port"
                                        ]
                                    }
                                }
                            },
                            "if": {
                                "properties": {
                                    "enabled": {
                                        "const": true
                                    }
                                }
                            },
                            "then": {
                                "required": [
                                    "rules"
                                ]
                            }
                        },
                        "dependencies": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "pattern": "^[0-9]+$"
                            },
                            "description": "An array of CTIDs that this container depends on. The orchestrator will ensure these containers are running before starting this one."
                        },
                        "run_integration_tests": {
                            "type": "boolean",
                            "description": "If true, runs post-deployment integration tests after the container's health check passes."
                        }
                    },
                    "required": [
                        "name",
                        "memory_mb",
                        "cores",
                        "storage_pool",
                        "storage_size_gb",
                        "network_config",
                        "portainer_role",
                        "unprivileged"
                    ],
                    "additionalProperties": false
                }
            },
            "additionalProperties": false
        }
    },
    "required": [
        "$schema",
        "nvidia_driver_version",
        "nvidia_repo_url",
        "nvidia_runfile_url",
        "lxc_configs"
    ],
    "additionalProperties": false
}