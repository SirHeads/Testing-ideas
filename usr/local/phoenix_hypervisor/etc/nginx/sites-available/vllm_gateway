# Nginx API Gateway configuration for various backend AI and management services.
# This file acts as a central entry point, routing requests to different services
# based on the URL path or server name. It is a key component of the Phoenix
-
# Hypervisor's microservice architecture.
# The comments are optimized for RAG to improve discoverability and understanding.

# Upstream definition for the embedding service.
upstream vllm_embedding_service {
    server 10.0.0.141:8000;
}

# Upstream definition for the Qwen LLM service.
upstream qwen_service {
    server 10.0.0.150:8000;
}

# Upstream definition for the Qdrant vector database.
upstream qdrant_service {
    server 10.0.0.152:6333;
}

# Upstream definition for the n8n automation service.
upstream n8n_service {
    server 10.0.0.154:5678;
}

# Upstream definition for the Open WebUI chat interface.
upstream open_webui_service {
    server 10.0.0.156:8080;
}

# Upstream definition for the Ollama AI service.
upstream ollama_service {
    server 10.0.0.155:11434;
}

# Upstream definition for the Llama.cpp service.
upstream llamacpp_service {
    server 10.0.0.157:8081;
}

# Upstream definition for the Portainer container management UI.
upstream portainer_service {
    server 10.0.0.101:9443;
}

# Main API gateway server block for path-based routing.
server {
    listen 80;
    server_name api.yourdomain.com 10.0.0.153;

    # Standard headers to pass client information to the backend services.
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Route requests for OpenAI-compatible chat completions to the Qwen service.
    location /v1/chat/completions {
        proxy_pass http://qwen_service;
    }

    # Route requests for legacy completions to the Qwen service.
    location /v1/completions {
        proxy_pass http://qwen_service;
    }

    # Route requests for embeddings to the embedding service.
    location /v1/embeddings {
        proxy_pass http://vllm_embedding_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Route requests to the Qdrant vector database.
    location /qdrant/ {
        proxy_pass http://qdrant_service/;
    }

    # Route requests to the n8n automation service.
    location /n8n/ {
        rewrite ^/n8n/?(.*)$ /$1 break;
        proxy_pass http://n8n_service;
    }

    # Route requests to the Open WebUI, with WebSocket support.
    location /webui/ {
        rewrite ^/webui/?(.*)$ /$1 break;
        proxy_pass http://open_webui_service;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Route requests to the Ollama AI service.
    location /ollama/ {
        rewrite ^/ollama/?(.*)$ /$1 break;
        proxy_pass http://ollama_service;
    }

    # Route requests to the Llama.cpp service.
    location /llamacpp/ {
        rewrite ^/llamacpp/?(.*)$ /$1 break;
        proxy_pass http://llamacpp_service;
    }

    # Route requests to the Portainer UI, with WebSocket support.
    location /portainer/ {
        rewrite ^/portainer/?(.*)$ /$1 break;
        proxy_pass http://portainer_service;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

# Redirect HTTP to HTTPS for the n8n service.
server {
    listen 80;
    server_name n8n.phoenix.local;
    return 301 https://$host$request_uri;
}

# HTTPS server block for the n8n service.
server {
    listen 443 ssl http2;
    server_name n8n.phoenix.local;

    # SSL/TLS configuration.
    ssl_certificate /etc/nginx/ssl/n8n.phoenix.local.crt;
    ssl_certificate_key /etc/nginx/ssl/n8n.phoenix.local.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers off;

    # Proxy all requests to the n8n backend, with WebSocket support.
    location / {
        proxy_pass http://n8n_service;
        proxy_ssl_verify off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

# Redirect HTTP to HTTPS for the Portainer service.
server {
    listen 80;
    server_name portainer.phoenix.local;
    return 301 https://$host$request_uri;
}

# HTTPS server block for the Portainer service.
server {
    listen 443 ssl http2;
    server_name portainer.phoenix.local;

    # SSL/TLS configuration.
    ssl_certificate /etc/nginx/ssl/portainer.phoenix.local.crt;
    ssl_certificate_key /etc/nginx/ssl/portainer.phoenix.local.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers off;

    # Proxy all requests to the Portainer backend, with WebSocket support.
    location / {
        proxy_pass https://portainer_service;
        proxy_ssl_verify off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}